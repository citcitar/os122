1. Best Fit Memory Allocation

#include <stdio.h>

void bestFit(int blockSize[], int blocks, int processSize[], int processes) {
    int allocation[processes];
    for (int i = 0; i < processes; i++) allocation[i] = -1;

    for (int i = 0; i < processes; i++) {
        int bestIdx = -1;
        for (int j = 0; j < blocks; j++) {
            if (blockSize[j] >= processSize[i]) {
                if (bestIdx == -1 || blockSize[j] < blockSize[bestIdx]) bestIdx = j;
            }
        }
        if (bestIdx != -1) {
            allocation[i] = bestIdx;
            blockSize[bestIdx] -= processSize[i];
        }
    }

    printf("Process No.\tProcess Size\tBlock No.\n");
    for (int i = 0; i < processes; i++) {
        printf("%d\t\t%d\t\t", i + 1, processSize[i]);
        allocation[i] != -1 ? printf("%d\n", allocation[i] + 1) : printf("Not Allocated\n");
    }
}

int main() {
    int blockSize[] = {100, 500, 200, 300, 600};
    int processSize[] = {212, 417, 112, 426};
    int blocks = sizeof(blockSize) / sizeof(blockSize[0]);
    int processes = sizeof(processSize) / sizeof(processSize[0]);

    bestFit(blockSize, blocks, processSize, processes);
    return 0;
}


2. Paging Concept
#include <stdio.h>
#define PAGE_SIZE 4

int main() {
    int logical_address, page_number, offset;

    printf("Enter Logical Address: ");
    scanf("%d", &logical_address);

    page_number = logical_address / PAGE_SIZE;
    offset = logical_address % PAGE_SIZE;

    printf("Page Number: %d, Offset: %d\n", page_number, offset);
    return 0;
}


3. FIFO Page Replacement	
#include <stdio.h>

int main() {
    int frames[3] = {-1, -1, -1}, pages[] = {1, 3, 0, 3, 5, 6, 3}, page_faults = 0, next_replace = 0;

    for (int i = 0; i < 7; i++) {
        int found = 0;
        for (int j = 0; j < 3; j++) if (frames[j] == pages[i]) found = 1;
        
        if (!found) {
            frames[next_replace] = pages[i];
            next_replace = (next_replace + 1) % 3;
            page_faults++;
        }

        printf("Frames: ");
        for (int j = 0; j < 3; j++) printf("%d ", frames[j]);
        printf("\n");
    }
    printf("Total Page Faults: %d\n", page_faults);
    return 0;
}



4. Deadlock Detection
#include <stdio.h>

int main() {
    int allocation[3][3] = {{0, 1, 0}, {2, 0, 0}, {3, 0, 2}};
    int max[3][3] = {{7, 5, 3}, {3, 2, 2}, {9, 0, 2}};
    int available[3] = {3, 3, 2}, finish[3] = {0}, safeSeq[3], work[3], count = 0;

    for (int i = 0; i < 3; i++) work[i] = available[i];

    while (count < 3) {
        int found = 0;
        for (int i = 0; i < 3; i++) {
            if (!finish[i]) {
                int j;
                for (j = 0; j < 3; j++)
                    if (max[i][j] - allocation[i][j] > work[j]) break;
                if (j == 3) {
                    for (int k = 0; k < 3; k++) work[k] += allocation[i][k];
                    safeSeq[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) {
            printf("System is in deadlock!\n");
            return 0;
        }
    }

    printf("Safe sequence is: ");
    for (int i = 0; i < 3; i++) printf("%d ", safeSeq[i]);
    printf("\n");
    return 0;
}

6. Producer-Consumer Problem (Semaphore)
#include <stdio.h>
#include <pthread.h>
#include <semaphore.h>

#define MAX_ITEMS 5
int buffer[MAX_ITEMS], count = 0;
sem_t empty, full;
pthread_mutex_t mutex;

void *producer(void *arg) {
    for (int i = 0; i < MAX_ITEMS; i++) {
        sem_wait(&empty);
        pthread_mutex_lock(&mutex);
        buffer[count++] = i;
        printf("Produced: %d\n", i);
        pthread_mutex_unlock(&mutex);
        sem_post(&full);
    }
    return NULL;
}

void *consumer(void *arg) {
    for (int i = 0; i < MAX_ITEMS; i++) {
        sem_wait(&full);
        pthread_mutex_lock(&mutex);
        printf("Consumed: %d\n", buffer[--count]);
        pthread_mutex_unlock(&mutex);
        sem_post(&empty);
    }
    return NULL;
}

int main() {
    pthread_t prod, cons;
    sem_init(&empty, 0, MAX_ITEMS);
    sem_init(&full, 0, 0);
    pthread_mutex_init(&mutex, NULL);

    pthread_create(&prod, NULL, producer, NULL);
    pthread_create(&cons, NULL, consumer, NULL);

    pthread_join(prod, NULL);
    pthread_join(cons, NULL);

    sem_destroy(&empty);
    sem_destroy(&full);
    pthread_mutex_destroy(&mutex);
    return 0;
}


7. Indexed File Allocation
#include <stdio.h>
#define MAX_BLOCKS 10

void indexedAllocation(int indexBlock[], int numFiles) {
    for (int i = 0; i < numFiles; i++) {
        printf("File %d stored in blocks: ", i + 1);
        for (int j = 0; j < MAX_BLOCKS; j++) {
            if (indexBlock[j] != -1) printf("%d ", indexBlock[j]);
        }
        printf("\n");
    }
}

int main() {
    int indexBlock[MAX_BLOCKS] = {1, 3, 5, 7, 9, -1, -1, -1, -1, -1};
    indexedAllocation(indexBlock, 5);
    return 0;
}


8. First Come First Serve CPU Scheduling (Without Arrival Time)
#include <stdio.h>

int main() {
    int n, bt[10], wt[10], tat[10];
    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter burst times:\n");
    for (int i = 0; i < n; i++) scanf("%d", &bt[i]);

    wt[0] = 0;
    for (int i = 1; i < n; i++) wt[i] = wt[i - 1] + bt[i - 1];
    for (int i = 0; i < n; i++) tat[i] = bt[i] + wt[i];

    printf("Process\tBurst Time\tWait Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++)
        printf("%d\t%d\t\t%d\t\t%d\n", i + 1, bt[i], wt[i], tat[i]);

    return 0;
}




9. Shortest Job First CPU Scheduling
#include <stdio.h>

void sortProcesses(int n, int bt[]) {
    for (int i = 0; i < n - 1; i++)
        for (int j = 0; j < n - i - 1; j++)
            if (bt[j] > bt[j + 1]) {
                int temp = bt[j];
                bt[j] = bt[j + 1];
                bt[j + 1] = temp;
            }
}

int main() {
    int n, bt[10], wt[10], tat[10];
    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter burst times:\n");
    for (int i = 0; i < n; i++) scanf("%d", &bt[i]);

    sortProcesses(n, bt);

    wt[0] = 0;
    for (int i = 1; i < n; i++) wt[i] = wt[i - 1] + bt[i - 1];
    for (int i = 0; i < n; i++) tat[i] = bt[i] + wt[i];

    printf("Process\tBurst Time\tWait Time\tTurnaround Time\n");
    for (int i = 0; i < n; i++)
        printf("%d\t%d\t\t%d\t\t%d\n", i + 1, bt[i], wt[i], tat[i]);

    return 0;
}


10. Shell Scripts
(i) Arithmetic Operations
#!/bin/bash
echo "Enter two numbers:"
read a b
echo "Select operation: + - * /"
read op
echo "Result: $((a $op b))"
(ii) Check Odd or Even
#!/bin/bash
echo "Enter a number:"
read num
if [ $((num % 2)) -eq 0 ]; then
    echo "$num is Even"
else
    echo "$num is Odd"
fi

5. File Organization using Two-Level Directory
#include <stdio.h>
#include <string.h>

struct Directory {
    char folderName[20];
    char files[5][20];
    int fileCount;
};

int main() {
    struct Directory dir[2];
    strcpy(dir[0].folderName, "Folder1");
    strcpy(dir[1].folderName, "Folder2");

    strcpy(dir[0].files[0], "fileA.txt");
    strcpy(dir[0].files[1], "fileB.txt");
    dir[0].fileCount = 2;

    strcpy(dir[1].files[0], "fileX.txt");
    dir[1].fileCount = 1;

    printf("Two-Level Directory Structure:\n");
    for (int i = 0; i < 2; i++) {
        printf("Folder: %s\n", dir[i].folderName);
        for (int j = 0; j < dir[i].fileCount; j++)
            printf(" -> %s\n", dir[i].files[j]);
    }

    return 0;
}

11. File Organization using Single-Level Directory
#include <stdio.h>
#include <string.h>

struct File {
    char fileName[20];
};

int main() {
    struct File files[5];
    int fileCount = 3;

    strcpy(files[0].fileName, "file1.txt");
    strcpy(files[1].fileName, "file2.txt");
    strcpy(files[2].fileName, "file3.txt");

    printf("Single-Level Directory Structure:\n");
    for (int i = 0; i < fileCount; i++)
        printf("File: %s\n", files[i].fileName);

    return 0;
}


12. Sequential File Processing for Student Information
#include <stdio.h>

struct Student {
    int id;
    char name[20];
    int marks;
};

int main() {
    struct Student s1 = {101, "Alice", 89};
    struct Student s2 = {102, "Bob", 76};

    FILE *file = fopen("students.txt", "w");
    fprintf(file, "%d %s %d\n", s1.id, s1.name, s1.marks);
    fprintf(file, "%d %s %d\n", s2.id, s2.name, s2.marks);
    fclose(file);

    printf("Student information stored in sequential file.\n");
    return 0;
}


13. Deadlock Avoidance using Banker's Algorithm
#include <stdio.h>

void banker(int allocation[][3], int max[][3], int available[], int n, int m) {
    int finish[n], safeSeq[n], work[m], count = 0;

    for (int i = 0; i < m; i++) work[i] = available[i];
    for (int i = 0; i < n; i++) finish[i] = 0;

    while (count < n) {
        int found = 0;
        for (int i = 0; i < n; i++) {
            if (!finish[i]) {
                int j;
                for (j = 0; j < m; j++)
                    if (max[i][j] - allocation[i][j] > work[j]) break;
                if (j == m) {
                    for (int k = 0; k < m; k++) work[k] += allocation[i][k];
                    safeSeq[count++] = i;
                    finish[i] = 1;
                    found = 1;
                }
            }
        }
        if (!found) {
            printf("System is in deadlock!\n");
            return;
        }
    }

    printf("Safe sequence: ");
    for (int i = 0; i < n; i++) printf("%d ", safeSeq[i]);
    printf("\n");
}

int main() {
    int allocation[3][3] = {{0, 1, 0}, {2, 0, 0}, {3, 0, 2}};
    int max[3][3] = {{7, 5, 3}, {3, 2, 2}, {9, 0, 2}};
    int available[3] = {3, 3, 2};

    banker(allocation, max, available, 3, 3);
    return 0;
}



14. Shared Memory & Inter-Process Communication
#include <stdio.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <string.h>

int main() {
    key_t key = 1234;
    int shmid = shmget(key, 1024, 0666 | IPC_CREAT);
    char *str = (char *)shmat(shmid, (void *)0, 0);

    strcpy(str, "Shared Memory Communication!");
    printf("Data Written: %s\n", str);

    shmdt(str);
    shmctl(shmid, IPC_RMID, NULL);
    return 0;
}



15. UNIX System Calls (fork, exec, getpid, exit, wait, close, stat, opendir, readdir)
#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <dirent.h>
#include <sys/stat.h>

int main() {
    pid_t pid = fork();
    if (pid == 0) {
        execl("/bin/ls", "ls", "-l", NULL);
    } else {
        wait(NULL);
        printf("Parent Process: PID = %d\n", getpid());
    }

    struct stat fileStat;
    if (stat("test.txt", &fileStat) == 0)
        printf("File Size: %ld bytes\n", fileStat.st_size);

    DIR *d = opendir(".");
    struct dirent *dir;
    while ((dir = readdir(d)) != NULL)
        printf("File: %s\n", dir->d_name);
    closedir(d);

    return 0;
}

16. Segmentation Concept
#include <stdio.h>

struct Segment {
    int base;
    int limit;
};

int main() {
    struct Segment segments[] = {
        {1000, 400}, {2000, 300}, {3000, 500}
    };

    printf("Segment Table:\n");
    printf("Segment\tBase\tLimit\n");
    for (int i = 0; i < 3; i++)
        printf("%d\t%d\t%d\n", i, segments[i].base, segments[i].limit);

    return 0;
}


17. Simulating UNIX Commands (cp, ls, grep)
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void copyFile(const char *src, const char *dest) {
    FILE *source = fopen(src, "r");
    FILE *destination = fopen(dest, "w");

    char ch;
    while ((ch = fgetc(source)) != EOF)
        fputc(ch, destination);

    fclose(source);
    fclose(destination);
}

int main(int argc, char *argv[]) {
    if (argc > 2 && strcmp(argv[1], "cp") == 0) {
        copyFile(argv[2], argv[3]);
        printf("File copied!\n");
    } else {
        printf("Usage: ./program cp source.txt dest.txt\n");
    }
    return 0;
}


18. Shell Programs
(i) Factorial of a Number
#!/bin/bash
echo "Enter a number:"
read num
fact=1
for ((i=1; i<=num; i++))
do
    fact=$((fact * i))
done
echo "Factorial of $num is $fact"

(ii) Check Leap Year
#!/bin/bash
echo "Enter a year:"
read year
if [[ $((year % 4)) -eq 0 && $((year % 100)) -ne 0 || $((year % 400)) -eq 0 ]]; then
    echo "$year is a Leap Year"
else
    echo "$year is NOT a Leap Year"
fi


19. Random Access File for Employee Details
#include <stdio.h>

struct Employee {
    int id;
    char name[20];
    float salary;
};

int main() {
    FILE *file = fopen("employees.dat", "w");
    struct Employee e1 = {101, "John", 50000}, e2 = {102, "Jane", 60000};

    fwrite(&e1, sizeof(struct Employee), 1, file);
    fwrite(&e2, sizeof(struct Employee), 1, file);
    fclose(file);

    file = fopen("employees.dat", "r");
    struct Employee e;
    while (fread(&e, sizeof(struct Employee), 1, file))
        printf("ID: %d, Name: %s, Salary: %.2f\n", e.id, e.name, e.salary);
    fclose(file);
    return 0;
}

20. Least Recently Used (LRU) Page Replacement
#include <stdio.h>

int findLRU(int time[], int n) {
    int min = time[0], pos = 0;
    for (int i = 1; i < n; i++)
        if (time[i] < min) {
            min = time[i];
            pos = i;
        }
    return pos;
}

int main() {
    int frames[3], time[3], pages[] = {1, 3, 0, 3, 5, 6, 3}, page_faults = 0, counter = 0;
    for (int i = 0; i < 3; i++) frames[i] = -1;

    for (int i = 0; i < 7; i++) {
        int found = 0;
        for (int j = 0; j < 3; j++)
            if (frames[j] == pages[i]) {
                found = 1;
                time[j] = counter++;
            }

        if (!found) {
            int pos = findLRU(time, 3);
            frames[pos] = pages[i];
            time[pos] = counter++;
            page_faults++;
        }

        printf("Frames: ");
        for (int j = 0; j < 3; j++) printf("%d ", frames[j]);
        printf("\n");
    }
    printf("Total Page Faults: %d\n", page_faults);
    return 0;
}

